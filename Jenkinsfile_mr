#!groovy

void handleCheckout() {
	if (env.gitlabMergeRequestId) {
		sh "echo 'Merge request detected. Merging...'"
		def credentialsId = scm.userRemoteConfigs[0].credentialsId
		checkout ([
			$class: 'GitSCM',
			branches: [[name: "${env.gitlabSourceNamespace}/${env.gitlabSourceBranch}"]],
			extensions: [
				[$class: 'PruneStaleBranch'],
				[$class: 'CleanCheckout'],
				[
					$class: 'PreBuildMerge',
					options: [
						fastForwardMode: 'NO_FF',
						mergeRemote: env.gitlabTargetNamespace,
						mergeTarget: env.gitlabTargetBranch
					]
				]
			],
userRemoteConfigs: [
[
credentialsId: credentialsId,
name: env.gitlabTargetNamespace,
url: env.gitlabTargetRepoSshURL
],
[
credentialsId: credentialsId,
name: env.gitlabSourceNamespace,
url: env.gitlabSourceRepoSshURL
]
]
		])
	} else {
		sh "echo 'No merge request detected. Checking out current branch'"
		checkout ([
			$class: 'GitSCM',
			branches: scm.branches,
			extensions: [
					[$class: 'PruneStaleBranch'],
					[$class: 'CleanCheckout']
			],
			userRemoteConfigs: scm.userRemoteConfigs
		])
	}
}

pipeline {
    agent any
    stages {
        stage('Checkout'){
            steps{
                sh "env | sort"
		        handleCheckout()
		        sh "git branch -vv"
            }
        }
        stage('Create Environment'){
            steps{
                sh """
                    python3 -m virtualenv ${WORKSPACE}/venv
                    echo ${WORKSPACE}/venv
                    . ${WORKSPACE}/venv/bin/activate
                    pip install -r requirements.txt
                """
            }
        }
        stage('Bandit Testing'){
            steps{
                script{
                    sh """
                        . ${WORKSPACE}/venv/bin/activate
                        pip install bandit
                        bandit -r flaskapp/ -f custom -o bandit.out --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}"
                    """
                    def output_list = readFile("bandit.out")
                    output_list.size()
                    if (output_list.size() != 0) {
                        error("Bandit caught an issue")
                        sh "echo ${output_list}"
                    }
                }
            }
        }
    }
    post{
        always{
            echo 'I Finished!'
        }
        success{
            echo 'I Succeeded!!'
        }
        failure{
            echo 'I failed :('
        }
    }
}